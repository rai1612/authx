server:
  port: ${PORT:8080}
  # Accept health checks from Railway
  forward-headers-strategy: framework
  servlet:
    context-path: /api/v1

spring:
  application:
    name: authx-mfa-system
  
  # PostgreSQL configuration using Railway environment variables
  datasource:
    url: jdbc:postgresql://${PGHOST}:${PGPORT}/${PGDATABASE}
    username: ${PGUSER}
    password: ${PGPASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 1
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      initialization-fail-timeout: -1  # Don't fail if DB not ready
      connection-test-query: SELECT 1
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
  
  # Redis configuration using Railway environment variables
  data:
    redis:
      url: ${REDIS_URL}
      timeout: 5000ms
      connect-timeout: 10000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 4
          min-idle: 1
        shutdown-timeout: 100ms
  
  # Email configuration
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

# JWT Configuration
jwt:
  secret: ${JWT_SECRET}
  expiration: ${JWT_EXPIRATION:86400000}
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000}

# MFA Configuration
mfa:
  otp:
    expiration: ${OTP_EXPIRATION:300}
    max-attempts: ${OTP_MAX_ATTEMPTS:3}
  webauthn:
    rp-id: ${WEBAUTHN_RP_ID}
    rp-name: ${WEBAUTHN_RP_NAME:AuthX MFA System}
    origin: ${WEBAUTHN_ORIGIN}

# Rate Limiting
rate-limit:
  login:
    capacity: 100
    refill-tokens: 10
    refill-period: 60
  otp:
    capacity: 50
    refill-tokens: 1
    refill-period: 300
  mfa:
    verification:
      capacity: 30
      refill-tokens: 1
      refill-period: 600
    setup:
      capacity: 20
      refill-tokens: 1
      refill-period: 900
    preferred-method:
      capacity: 10
      refill-tokens: 1
      refill-period: 3600
  password-reset:
    capacity: 20
    refill-tokens: 1
    refill-period: 900

# SMS Configuration
sms:
  enabled: ${SMS_ENABLED:true}
  provider: ${SMS_PROVIDER:mock}
  twilio:
    account-sid: ${TWILIO_ACCOUNT_SID:}
    auth-token: ${TWILIO_AUTH_TOKEN:}
    from-number: ${TWILIO_FROM_NUMBER:}

# Logging
logging:
  level:
    com.authx: INFO
    org.springframework.security: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Actuator Configuration for Railway  
management:
  # Put actuator at ROOT level (not under /api/v1) so Railway can access it
  server:
    port: ${PORT:8080}
    base-path: /
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /actuator
  endpoint:
    health:
      show-details: always
  # Simple health indicator that doesn't depend on external services
  health:
    defaults:
      enabled: true
    db:
      enabled: false
    redis:
      enabled: false